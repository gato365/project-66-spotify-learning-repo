import os
import requests
from dotenv import load_dotenv
import pandas as pd
load_dotenv()

client_id = os.getenv('SPOTIFY_CLIENT_ID')
client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')

def get_spotify_access_token(client_id, client_secret):
    auth_url = 'https://accounts.spotify.com/api/token'
    auth_response = requests.post(auth_url, data={
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret,
    })
    if auth_response.status_code != 200:
        raise Exception(f"Failed to get access token: {auth_response.text}")
    return auth_response.json()['access_token']

def search_spotify(queries, type, access_token):
    search_results = []
    for query in queries:
        search_url = 'https://api.spotify.com/v1/search'
        headers = {'Authorization': f'Bearer {access_token}'}
        params = {'q': query, 'type': type, 'limit': 1}  
        response = requests.get(search_url, headers=headers, params=params)
        if response.status_code == 200:
            search_results.extend(response.json()[type + 's']['items'])  
        else:
            print(f"Failed to search for {query}: {response.text}")
    return search_results


def get_possible_genres(access_token=None):
    if access_token is None:
        access_token = get_spotify_access_token()  
 
    url = "https://api.spotify.com/v1/recommendations/available-genre-seeds"
    headers = {'Authorization': f'Bearer {access_token}'}
    response = requests.get(url, headers=headers)
    
    if response.status_code != 200:
        raise Exception(f"Failed to get genre information: {response.text}")
    
    genres = response.json()['genres']  
    df = pd.DataFrame({'genre': genres})  
    return df


def get_genre_tracks(genre, limit=20, offset=0, access_token=None):
    """Fetches tracks from a specified genre using Spotify's API."""
    if access_token is None:
        access_token = get_spotify_access_token()  

    url = "https://api.spotify.com/v1/search"
    headers = {'Authorization': f'Bearer {access_token}'}
    params = {
        'q': f'genre:"{genre}"',
        'type': 'track',
        'market': 'US',
        'limit': limit,
        'offset': offset
    }

    response = requests.get(url, headers=headers, params=params)
    
    if response.status_code != 200:
        raise Exception(f"Failed to fetch tracks: {response.text}")
    
    tracks = response.json()['tracks']['items']
    
    data = []
    for track in tracks:
        if track['artists']:  
            artist_ids = ', '.join([artist['id'] for artist in track['artists']])
            artist_names = ', '.join([artist['name'] for artist in track['artists']])
        else:
            artist_ids, artist_names = None, None
        
        data.append({
            'track_id': track['id'],
            'track_name': track['name'],
            'album_type': track['album']['album_type'] if 'album' in track else None,
            'artist_id': artist_ids,
            'artist_name': artist_names
        })
    df = pd.DataFrame(data)
    return df

def get_genre_artists(genre, limit=20, offset=0, access_token=None):
    """Fetches artists from a specified genre using Spotify's API."""
    if access_token is None:
        access_token = get_spotify_access_token()  

    url = "https://api.spotify.com/v1/search"
    headers = {'Authorization': f'Bearer {access_token}'}
    params = {
        'q': f'genre:"{genre}"',
        'type': 'artist',
        'market': 'US',
        'limit': limit,
        'offset': offset
    }

    response = requests.get(url, headers=headers, params=params)
    
    if response.status_code != 200:
        raise Exception(f"Failed to fetch artists: {response.text}")
    
    artists = response.json()['artists']['items']
    
    data = []
    for artist in artists:
        data.append({
            'artist_id': artist['id'],
            'artist_name': artist['name'],
            'followers_total': artist['followers']['total'],
            'popularity': artist['popularity'], 
            'genres': ', '.join(artist['genres'])  
        })

    df = pd.DataFrame(data)
    return df

def get_track_audio_features(queries=None, ids=None, access_token=None):
    if ids and len(ids) > 100:
        raise ValueError("The maximum length of the ids vector is 100. Please shorten the length of the input vector.")
    if queries is not None:
        search_results = search_spotify(queries, "track", access_token)
        ids = [track['id'] for track in search_results]
    if not ids:
        raise ValueError("No track ids provided or found.")
    url = 'https://api.spotify.com/v1/audio-features'
    headers = {'Authorization': f'Bearer {access_token}'}
    params = {'ids': ','.join(ids)}
    response = requests.get(url, headers=headers, params=params)
    if response.status_code != 200:
        raise Exception(f"Failed to get track audio features: {response.text}")
    result = response.json()['audio_features']
    df = pd.DataFrame(result)
    df = df.drop(columns=['type', 'uri', 'track_href', 'analysis_url'])
    df = df.rename(columns={'id': 'track_id'})
    return df

def get_genre_summary(genre, access_token=None):
    if access_token is None:
        access_token = get_spotify_access_token() 

    tracks_df = get_genre_tracks(genre, access_token=access_token)
    track_ids = tracks_df['track_id'].tolist()

    features_df = get_track_audio_features(track_ids, access_token=access_token)

    features_to_summarize = ['danceability', 'energy', 'loudness', 'speechiness',
                             'acousticness', 'instrumentalness', 'liveness', 'valence', 
                             'tempo', 'duration_ms', 'mode']

    summary_stats = features_df[features_to_summarize].agg(['mean', 'std']).transpose()
    summary_stats.reset_index(inplace=True)
    summary_stats.rename(columns={'index': 'feature'}, inplace=True)

    summary_stats['genre'] = genre

    return summary_stats

def get_genre_track_features(genre, limit=20, access_token=None):
    if access_token is None:
        access_token = get_spotify_access_token()  

    tracks_df = get_genre_tracks(genre, limit=limit, access_token=access_token)
    track_ids = tracks_df['track_id'].tolist()

    features_df = get_track_audio_features(ids=track_ids, access_token=access_token)

    result_df = pd.merge(tracks_df, features_df, on='track_id', how='left')

    return result_df

access_token = get_spotify_access_token(client_id, client_secret)
genre_features_df = get_genre_track_features('country', limit=20, access_token=access_token)
print(genre_features_df)
